
# import the vbnmr module.
import vbnmr;

# define some constants.
nexpt = 200;
M = 5;
tau = 1;
tauf = 20;

# create a random number generator.
rand = rng();

# create a uniformly gridded dataset for sampling.
dat = data();
G = [[0, 1, 1000]];
dat.augment(outputs: [0, 1], grid: G);

# create a table for holding initial and final parameters.
par = [[0] * 6] * M;

# create a model.
mdl = vfgp(
  tau: tau,
  nu: 1e-6,
  data: dat,
  factors: M * [decay(alpha: 100, beta: 1e5, fixed: true) *
                quad(mu: 0, tau: tauf, ftsize: 65536)]
);

# loop over the number of experiments.
for expt in std.range(n: nexpt) {
  # sample a random phase shift.
  phi = pi * rand.uniform(lower: -1, upper: 1);

  # set the initial factor frequencies.
  for j in std.range(n: mdl.M) {
    # sample a random frequency.
    freq = rand.normal(tau: tauf);

    # set the factor frequency mean.
    mdl.factors[j][1].mu = freq;
    mdl.factors[j].update();

    # store the frequency in the table.
    par[j][0] = freq;
  }

  # set the initial factor weights.
  winit = [0] * mdl.K;
  for k in std.range(begin: 0, step: 2, end: mdl.K - 1) {
    # sample a random amplitude.
    w = rand.uniform(lower: 1, upper: 100);
    w0 = w * math.cos(v: phi);
    w1 = w * math.sin(v: phi);

    # set the weight values.
    winit[k + 0] = w0;
    winit[k + 1] = w1;

    # store the amplitude in the table.
    par[k/2][1] = w;
  }

  # evaluate the model over the input dataset.
  mdl.wbar = winit;
  mdl.eval(data: dat);

  # add noise to the model evaluation.
  for i in std.range(n: dat.N) {
    dat[i] = dat[i].y + rand.normal(tau: tau);
  }

  # reset the model.
  mdl.reset();

  # optimize using a mean-field iteration.
  opt = mf(model: mdl, maxIters: 1);
  opt.execute();

  # optimize further using natural gradients.
  opt = fg(model: mdl);
  opt.execute();

  # extract the inferred parameters.
  wbar = mdl.wbar;
  Sigma = mdl.Sigma;
  for j in std.range(n: mdl.M) {
    # get the frequency mean and standard deviation.
    freq = mdl.factors[j][1].mu;
    freqErr = 1 / math.sqrt(v: mdl.factors[j][1].tau);

    # get the weight mean and standard deviation.
    w0 = wbar[2 * j] ^ 2;
    w1 = wbar[2 * j + 1] ^ 2;
    S0 = Sigma[2 * j][2 * j];
    S1 = Sigma[2 * j + 1][2 * j + 1];
    ampl = math.sqrt(v: w0 + w1);
    amplErr = math.sqrt(v: S0 + S1);

    # store the values in the table.
    par[j][2] = freq;
    par[j][3] = ampl;
    par[j][4] = freqErr;
    par[j][5] = amplErr;

    # output the initial and inferred parameters.
    std.println(f: ' %16.9le' * 6, v: par[j]);
  }
}

